name: smoke
on:
  workflow_dispatch:
jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      # ------------------------------
      # Block A – Node + CA setup
      # ------------------------------
      - name: Write CA file
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p /tmp/certs
          echo "${{ secrets.SSL_CA_PEM }}" > /tmp/certs/supabase-root-2021.pem
          {
            echo "NODE_EXTRA_CA_CERTS=/tmp/certs/supabase-root-2021.pem"
            echo "SSL_CA_PEM_PATH=/tmp/certs/supabase-root-2021.pem"
          } >> "$GITHUB_ENV"
      # ------------------------------
      # Block B – Force IPv4 resolver
      # ------------------------------
      - name: Force IPv4 for Supabase DB
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          H="db.yunfbzwdftdnclmdcjhh.supabase.co"
          # Try local resolver (ignore failures so fallbacks still run)
          IP="$(getent ahostsv4 "$H" 2>/dev/null | awk 'NR==1{print $1}' || true)"
          if [ -z "${IP:-}" ]; then
            IP="$(getent hosts "$H" 2>/dev/null | awk '/^[0-9]+\./{print $1; exit}' || true)"
          fi
          # DNS-over-HTTPS via Python (Cloudflare, then Google)
          if [ -z "${IP:-}" ]; then
            IP="$(
              python3 - "$H" <<'PY'
          import json, sys, urllib.request as u, urllib.parse as p
          q = sys.argv[1]
          providers = [
              ("https://cloudflare-dns.com/dns-query", {"accept": "application/dns-json"}),
              ("https://dns.google/resolve", None),
          ]
          for base, hdrs in providers:
              try:
                  url = base + "?" + p.urlencode({"name": q, "type": "A"})
                  req = u.Request(url, headers=hdrs) if hdrs else url
                  data = json.load(u.urlopen(req))
                  for ans in data.get("Answer", []):
                      if ans.get("type") == 1 and ans.get("data"):
                          print(ans["data"])
                          sys.exit(0)
              except Exception:
                  pass
          sys.exit(1)
          PY
            )" || true
          fi
          if [ -z "${IP:-}" ]; then
            echo "No IPv4 found for $H (only AAAA visible). Proceeding without override."
            exit 0
          fi
          echo "Resolved $H -> $IP"
          {
            echo "PG_SNI_HOST=$H"
            echo "PG_HOST_OVERRIDE=$IP"
          } >> "$GITHUB_ENV"
      - name: Override DB URL with IPv4
        shell: bash
        run: |
          set -euo pipefail
          ORIGINAL_URL="${{ secrets.SUPABASE_DB_URL }}"
          
          if [ -n "${PG_HOST_OVERRIDE:-}" ] && [ -n "${PG_SNI_HOST:-}" ]; then
            echo "Replacing hostname in connection string with IPv4..."
            # Replace the hostname with the IP address
            MODIFIED_URL="${ORIGINAL_URL//$PG_SNI_HOST/$PG_HOST_OVERRIDE}"
            echo "SUPABASE_DB_URL_FINAL=$MODIFIED_URL" >> "$GITHUB_ENV"
            echo "Using modified connection string with IPv4"
          else
            echo "No IPv4 override available, using original URL"
            echo "SUPABASE_DB_URL_FINAL=$ORIGINAL_URL" >> "$GITHUB_ENV"
          fi
      - name: Show resolved env
        shell: bash
        run: |
          echo "PG_SNI_HOST=${PG_SNI_HOST:-<none>}"
          echo "PG_HOST_OVERRIDE=${PG_HOST_OVERRIDE:-<none>}"
          echo "NODE_EXTRA_CA_CERTS=${NODE_EXTRA_CA_CERTS:-<none>}"
          echo "SSL_CA_PEM_PATH=${SSL_CA_PEM_PATH:-<none>}"
      # ------------------------------
      # Block C – Install & check DB
      # ------------------------------
      - name: Install dependencies
        run: npm ci
      - name: db:status
        working-directory: packages/ingest
        env:
          SUPABASE_DB_URL: ${{ env.SUPABASE_DB_URL_FINAL }}
          NODE_EXTRA_CA_CERTS: ${{ env.NODE_EXTRA_CA_CERTS }}
          SSL_CA_PEM_PATH: ${{ env.SSL_CA_PEM_PATH }}
          NODE_OPTIONS: "--dns-result-order=ipv4first"
        run: npm run db:status
