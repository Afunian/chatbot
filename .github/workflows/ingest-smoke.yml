name: smoke
on:
  workflow_dispatch:
jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      # ------------------------------
      # Block A – Node + CA setup
      # ------------------------------
      - name: Write CA file
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p /tmp/certs
          echo "${{ secrets.SSL_CA_PEM }}" > /tmp/certs/supabase-root-2021.pem
          {
            echo "NODE_EXTRA_CA_CERTS=/tmp/certs/supabase-root-2021.pem"
            echo "SSL_CA_PEM_PATH=/tmp/certs/supabase-root-2021.pem"
          } >> "$GITHUB_ENV"
      # ------------------------------
      # Block B – Setup IPv6 tunnel via socat
      # ------------------------------
      - name: Install socat
        run: sudo apt-get update && sudo apt-get install -y socat
      
      - name: Setup IPv6-to-IPv4 proxy
        shell: bash
        run: |
          set -euo pipefail
          H="db.yunfbzwdftdnclmdcjhh.supabase.co"
          PORT="5432"
          LOCAL_PORT="15432"
          
          # Get IPv6 address
          IP6="$(dig +short AAAA "$H" @8.8.8.8 | grep -E '^[0-9a-f:]+$' | head -n1 || true)"
          
          if [ -z "${IP6:-}" ]; then
            echo "ERROR: Could not resolve IPv6 address for $H"
            exit 1
          fi
          
          echo "Setting up socat proxy: 127.0.0.1:$LOCAL_PORT -> [$IP6]:$PORT"
          
          # Start socat in background
          nohup socat TCP4-LISTEN:$LOCAL_PORT,reuseaddr,fork TCP6:[$IP6]:$PORT > /tmp/socat.log 2>&1 &
          SOCAT_PID=$!
          echo "SOCAT_PID=$SOCAT_PID" >> "$GITHUB_ENV"
          
          # Wait a moment for socat to start
          sleep 2
          
          # Verify socat is running
          if ! ps -p $SOCAT_PID > /dev/null; then
            echo "ERROR: socat failed to start"
            cat /tmp/socat.log
            exit 1
          fi
          
          echo "Socat proxy started successfully (PID: $SOCAT_PID)"
          echo "PG_PROXY_HOST=127.0.0.1" >> "$GITHUB_ENV"
          echo "PG_PROXY_PORT=$LOCAL_PORT" >> "$GITHUB_ENV"
          echo "PG_ORIGINAL_HOST=$H" >> "$GITHUB_ENV"
      
      - name: Modify connection string for proxy
        shell: bash
        run: |
          set -euo pipefail
          ORIGINAL_URL="${{ secrets.SUPABASE_DB_URL }}"
          
          # Replace hostname and port with proxy
          MODIFIED_URL="${ORIGINAL_URL//${PG_ORIGINAL_HOST}:5432/127.0.0.1:${PG_PROXY_PORT}}"
          
          # If no port was specified in original, add it
          if [[ "$ORIGINAL_URL" != *":5432"* ]]; then
            MODIFIED_URL="${ORIGINAL_URL//${PG_ORIGINAL_HOST}/127.0.0.1:${PG_PROXY_PORT}}"
          fi
          
          echo "SUPABASE_DB_URL_PROXY=$MODIFIED_URL" >> "$GITHUB_ENV"
          echo "Modified connection string to use local proxy"
      
      - name: Show resolved env
        shell: bash
        run: |
          echo "PG_ORIGINAL_HOST=${PG_ORIGINAL_HOST:-<none>}"
          echo "PG_PROXY_HOST=${PG_PROXY_HOST:-<none>}"
          echo "PG_PROXY_PORT=${PG_PROXY_PORT:-<none>}"
          echo "NODE_EXTRA_CA_CERTS=${NODE_EXTRA_CA_CERTS:-<none>}"
          echo "SSL_CA_PEM_PATH=${SSL_CA_PEM_PATH:-<none>}"
          echo "SOCAT_PID=${SOCAT_PID:-<none>}"
          echo ""
          echo "Socat status:"
          ps aux | grep socat | grep -v grep || echo "socat not running"
          echo ""
          echo "Testing local proxy port:"
          netstat -tlnp 2>/dev/null | grep ${PG_PROXY_PORT} || echo "Port not listening"
      # ------------------------------
      # Block C – Install & check DB
      # ------------------------------
      - name: Install dependencies
        run: npm ci
      
      - name: db:status
        working-directory: packages/ingest
        env:
          SUPABASE_DB_URL: ${{ env.SUPABASE_DB_URL_PROXY }}
          NODE_EXTRA_CA_CERTS: ${{ env.NODE_EXTRA_CA_CERTS }}
          SSL_CA_PEM_PATH: ${{ env.SSL_CA_PEM_PATH }}
        run: npm run db:status
      
      - name: Cleanup socat
        if: always()
        shell: bash
        run: |
          if [ -n "${SOCAT_PID:-}" ]; then
            echo "Stopping socat (PID: $SOCAT_PID)"
            kill $SOCAT_PID || true
          fi
          echo "Socat logs:"
          cat /tmp/socat.log || true
